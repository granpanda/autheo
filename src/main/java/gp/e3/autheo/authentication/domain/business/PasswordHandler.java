package gp.e3.autheo.authentication.domain.business;

import gp.e3.autheo.authentication.infrastructure.validators.StringValidator;

import java.math.BigInteger;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;

import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

public class PasswordHandler {

	public static final String PBKDF2_ALGORITHM = "PBKDF2WithHmacSHA1";

	public static final int SALT_BYTE_SIZE = 24;
	public static final int HASH_BYTE_SIZE = 24;
	public static final int PBKDF2_ITERATIONS = 1000;

	public static final int ITERATION_INDEX = 0;
	public static final int SALT_INDEX = 1;
	public static final int PBKDF2_INDEX = 2;

	public static final String SPLIT_TOKEN = ":";

	/**
	 * Returns a salted hash of the given password using: PBKDF2
	 * 
	 * @param password, the password to the salted and salted.
	 * @return a salted and hashed string
	 * 
	 * @throws NoSuchAlgorithmException
	 * @throws InvalidKeySpecException
	 */
	public static String getPasswordHash(String password) throws NoSuchAlgorithmException, 
	InvalidKeySpecException, IllegalArgumentException {

		if (StringValidator.isValidString(password)) {

			char[] passwordChars = password.toCharArray();

			SecureRandom secureRandom = new SecureRandom();
			byte[] salt = new byte[SALT_BYTE_SIZE];
			secureRandom.nextBytes(salt);

			byte[] passwordAndSaltHash = applyPBKDF2Function(passwordChars, salt, PBKDF2_ITERATIONS, HASH_BYTE_SIZE);

			String fullHash = PBKDF2_ITERATIONS + SPLIT_TOKEN + convertToHexString(salt)
					+ SPLIT_TOKEN + convertToHexString(passwordAndSaltHash);

			return fullHash;

		} else {

			String errorMessage = "The given argument is not valid.";
			throw new IllegalArgumentException(errorMessage);
		}
	}

	/**
	 * Return the salt of the String generated by the method getPasswordHash.
	 * 
	 * @param hashedAndSaltedPassword, the result of the method getPasswordHash.
	 * @return the salt of the String generated by the method getPasswordHash.
	 * @throws IllegalArgumentException, exception thrown when the parameter does not follow the expected format.
	 */
	public static String getSaltFromHashedAndSaltedPassword(String hashedAndSaltedPassword) {

		if (StringValidator.isValidString(hashedAndSaltedPassword)) {

			String salt = "";

			if (hashedAndSaltedPassword.contains(SPLIT_TOKEN)) {

				String[] array = hashedAndSaltedPassword.split(SPLIT_TOKEN);
				salt = array[SALT_INDEX];

			} else {

				String errorMessage = "The argument does not match the expected pattern.";
				throw new IllegalArgumentException(errorMessage);
			}

			return salt;

		} else {

			String errorMessage = "The given argument is not valid.";
			throw new IllegalArgumentException(errorMessage);
		}
	}

	/**
	 * Calculate and return the hash of the given password using PBKDF2.
	 * 
	 * @param password, the password from which we want to take the hash.
	 * @param salt, the salt to be applied.
	 * 
	 * @param iterations, the number of iterations for the algorithm.
	 * @param bytes, the length of the key to be delivered.
	 * 
	 * @return the hash of the given password applying the salt, the number of iterations and a fixed key length.
	 * 
	 * @throws NoSuchAlgorithmException
	 * @throws InvalidKeySpecException
	 */
	private static byte[] applyPBKDF2Function(char[] password, byte[] salt, int iterations, int bytes) throws NoSuchAlgorithmException, InvalidKeySpecException {

		PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, bytes * 8);
		SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(PBKDF2_ALGORITHM);

		return secretKeyFactory.generateSecret(spec).getEncoded();
	}

	private static String convertToHexString(byte[] byteArray) {

		BigInteger bigInteger = new BigInteger(1, byteArray);
		String hex = bigInteger.toString(16);

		int paddingLength = (byteArray.length * 2) - hex.length();
		String answer = "";

		if (paddingLength > 0) {

			answer = String.format("%0" + paddingLength + "d", 0) + hex;

		} else {

			answer = hex;
		}

		return answer;
	}

	/**
	 * Return a byte array given a string.
	 * 
	 * @param hexString, the string to be converted to a byte array. 
	 * @return the byte representation of the given string.
	 */
	private static byte[] getByteArrayFromHexString(String hexString) {

		byte[] byteArray = new byte[hexString.length() / 2];

		for (int i = 0; i < byteArray.length; i++) {

			byteArray[i] = (byte) Integer.parseInt(hexString.substring(2 * i, 2 * i + 2), 16);
		}

		return byteArray;
	}

	/**
	 * Return true if the password is correct, otherwise return false.
	 * 
	 * @param password, the password to be proven.
	 * @param correctHash, the theoretically correct hash of the given password.
	 * @return true if the password is correct, otherwise return false.
	 * @throws NoSuchAlgorithmException
	 * @throws InvalidKeySpecException
	 */
	public static boolean validatePassword(String password, String correctHash) throws NoSuchAlgorithmException, 
	InvalidKeySpecException, IllegalArgumentException {

		if (StringValidator.isValidString(password) && StringValidator.isValidString(correctHash)) {

			if (correctHash.contains(SPLIT_TOKEN)) {

				String[] hashParts = correctHash.split(SPLIT_TOKEN);

				int iterations = Integer.parseInt(hashParts[ITERATION_INDEX]);
				byte[] salt = getByteArrayFromHexString(hashParts[SALT_INDEX]);
				byte[] hash = getByteArrayFromHexString(hashParts[PBKDF2_INDEX]);

				byte[] expectedHash = applyPBKDF2Function(password.toCharArray(), salt, iterations, hash.length);

				return slowEquals(hash, expectedHash);

			} else {

				String errorMessage = "The argument does not match the expected pattern.";
				throw new IllegalArgumentException(errorMessage);
			}

		} else {
			
			String errorMessage = "One or more arguments are not valid.";
			throw new IllegalArgumentException(errorMessage);
		}
	}

	/**
	 * Compare two byte arrays in length-constant time. This comparison method
	 * is used so that password hashes cannot be extracted from an on-line 
	 * system using a timing attack and then attacked off-line.
	 * 
	 * @param firstArray, the first byte array
	 * @param secondArray, the second byte array
	 * @return true if both byte arrays are the same, false if not
	 */
	private static boolean slowEquals(byte[] firstArray, byte[] secondArray) {

		int diff = firstArray.length ^ secondArray.length;

		for(int i = 0; i < firstArray.length && i < secondArray.length; i++) {

			diff |= firstArray[i] ^ secondArray[i];
		}

		return diff == 0;
	}
}